---
- name: Create temp directory for doing work in
  command: mktemp -d /tmp/app-monitoring-operator-XXXXXX
  register: mktemp
  changed_when: False
  check_mode: no

- name: "Prometheus Deployment: deploy service account"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    api_version: v1
    name: '{{ prometheus_service_account }}'
    kind: ServiceAccount
    namespace: '{{ meta.namespace }}'
    definition:
      metadata:
        annotations:
           serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"prometheus"}}'

- name: "Prometheus Deployment: create clusterrolebinding"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: '{{ prometheus_service_account }}-{{ meta.namespace }}'
        labels:
          app-monitor: '{{ prometheus_app_label }}'
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: '{{ prometheus_clusterrole }}'
      subjects:
      - kind: ServiceAccount
        name: '{{ prometheus_service_account }}'
        namespace: '{{ meta.namespace }}'

- name: create service for prometheus
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: prometheus
        namespace: '{{ meta.namespace }}'
        annotations:
          service.alpha.openshift.io/serving-cert-secret-name: prometheus-tls
        labels:
          app-monitor: monitor
      spec:
        ports:
          - name: https
            port: 9091
            protocol: TCP
            targetPort: https
        selector:
          prometheus: '{{ prometheus_service_account }}'

- name: "Create route.yml files from templates"
  template:
    src: "route-reencrypt.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}-route.yml"
  loop:
    - "prometheus"
    - "grafana"

- name: "Create routes"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/{{ item }}-route.yml"
  loop:
    - "prometheus"
    - "grafana"

- name: Generate session_secret
  set_fact:
    session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"

- name: Create prometheus session_secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-proxy
        namespace: '{{ meta.namespace }}'
      stringData:
        session_secret: "{{ session_secret }}"

- name: Generate session secret for prometheus
  htpasswd:
    path: "{{ mktemp.stdout }}/prometheus.htpasswd"
    name: internal
    password: '{{ session_secret }}'
    crypt_scheme: ldap_sha1

- name: Create prometheus htpasswd auth secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: prometheus-htpasswd
        namespace: '{{ meta.namespace }}'
      stringData:
        auth: "{{ lookup('file', '{{ mktemp.stdout }}/prometheus.htpasswd') }}"

- name: "Prometheus Deployment: template deployment"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "prometheus.yml"

- name: "Prometheus Deployment: create prometheus CRD deployment"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/prometheus.yml"

- name: "Grafana Deployment: create grafana service account"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    api_version: v1
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: '{{ grafana_service_account }}'
        namespace: '{{ meta.namespace }}'
        annotations:
           serviceaccounts.openshift.io/oauth-redirectreference.primary: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana"}}'

- name: "Grafana Deployment: set clusterrolebinding for grafana service account"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1beta1
      kind: ClusterRoleBinding
      metadata:
        name: '{{ grafana_service_account }}'
        labels:
          app-monitor: '{{ prometheus_app_label }}'
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: grafana
      subjects:
        - kind: ServiceAccount
          name: '{{ grafana_service_account }}'
          namespace: '{{ meta.namespace }}'

- name: create service for grafana
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/scheme: https
          service.alpha.openshift.io/serving-cert-secret-name: grafana-tls
        namespace: '{{ meta.namespace }}'
        labels:
          name: grafana
      spec:
        ports:
          - name: https
            port: '3001'
            protocol: TCP
            targetPort: https
        selector:
          app: grafana

- name: Create grafana session_secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: grafana-proxy
        namespace: '{{ meta.namespace }}'
      stringData:
        session_secret: "{{ lookup('password', '/tmp/session_secret length=43 chars=ascii_letters,digits') }}"


- name: "Grafana Deployment: create grafana pvc"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: "{{ grafana_service_account }}-pvc"
        labels:
          app: '{{ grafana_service_account }}'
          app-monitor: '{{ prometheus_app_label }}'
        namespace: '{{ meta.namespace }}'
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  when: grafana_storage_type == 'pvc'

- name: "Check if grafana configmap exists"
  k8s_facts:
    api_version: v1
    kind: ConfigMap
    namespace: "{{ meta.namespace }}"
    name: "{{ grafana_dashboard_configmap }}"
  register: grafana_cm
  when: grafana_dashboard_configmap is defined and grafana_dashboard_configmap is not none

- name: create grafana-config configmap
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "{{ grafana_dashboard_configmap }}"
        namespace: "{{ meta.namespace }}"
      data: null
  when: grafana_cm is defined and grafana_cm is not none

- name: "Grafana Deployment: template deployment and grafana-config"
  template:
    src: "{{ item }}.j2"
    dest: "{{ mktemp.stdout }}/{{ item }}"
  loop:
    - "grafana.yml"
    - "grafana-config.yml"
    - "grafana-datasources.yml"

- name: create grafana-config configmap
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        namespace: '{{ meta.namespace }}'
        name: grafana-config
      data:
        grafana.ini: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-config.yml') }}"

- name: Create grafana datasource secret
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: grafana-datasources
        namespace: '{{ meta.namespace }}'
      stringData:
        prometheus.yaml: "{{ lookup('file', '{{ mktemp.stdout }}/grafana-datasources.yml') }}"

- name: "Grafana Deployment: create grafana deployment"
  k8s:
    verify_ssl: "{{ k8s_auth_verify_ssl }}"
    state: present
    src: "{{ mktemp.stdout }}/grafana.yml"
